//https://leetcode.com/problems/letter-combinations-of-a-phone-number/
class Solution {
    public void combo(List<String> res, char[][] chars, char[] in, int i, StringBuilder sb){
        if(i==in.length){
            res.add(sb.toString());
            return;
        }
        for(char e: chars[(in[i]-'0')-2]) {
            sb.append(e+"");
            combo(res,chars,in,i+1,sb);
            sb.deleteCharAt(i);
        }
    }
    public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<String>();
        if(digits.length()==0)return res;
        char[][] chars = new char[][]{
            {'a','b','c'},
            {'d','e','f'},
            {'g','h','i'},
            {'j','k','l'},
            {'m','n','o'},
            {'p','q','r','s'},
            {'t','u','v'},
            {'w','x','y','z'}
        };
        char[] in = digits.toCharArray();
        combo(res,chars,in,0,new StringBuilder(in.length));
        return res;
    }
}